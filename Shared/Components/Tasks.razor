@namespace Components

@inject State state;
<h1>@Title</h1>

@if (state.IsLoading)
{
    <Alert Message="Loading..." />
    Console.WriteLine("Loading...");
}

else if (state.HasError)
{
    <Alert Message="There was a problem with your request" />
    Console.WriteLine("Error with the request");
    state.HasError = false;
}

else if (!tasks.Any())
{
    <AlertContainer>
        <strong> There are no tasks in the moment</strong>
    </AlertContainer>
    Console.WriteLine("List of tasks is empty");
}
else
{
    <table class="table">
        <thead>
            <th>Date</th>
            <th>Description</th>
            <th>Finished</th>
        </thead>
        <tbody>
            @foreach (var task in tasks)
            {
                <tr>
                    <SingleTask Item="task" OnDeleteTask="HandleDelete" />
                </tr>
            }
        </tbody>
    </table>
}

@if (tasks != null)
{
    <div class="form-group">
        <label for="">New Task</label>
        <input type="text" name="" id="" placeholder="Type new Task" @bind="@newTask">
        <button type="button" @onclick="AddTask">Add Task</button>
    </div>
}


@code {
    [Parameter]
    public List<Assignment> tasks { get; set; } = new List<Assignment>() { };
    [Parameter] public string? Title { get; set; }

    private string newTask = "";


    private void AddTask()
    {
        if (!string.IsNullOrWhiteSpace(newTask) && tasks != null)
        {
            tasks.Add(new Assignment()
                {
                    CreationDate = DateTime.Now,
                    Description = newTask,
                    Done = false,
                    ID = Guid.NewGuid(),
                });
            Console.WriteLine($"New Task {newTask} added");
        }
        newTask = "";
    }

    private void HandleDelete(Assignment item)
    {
        if (tasks != null)
        {
            tasks.Remove(tasks.First<Assignment>(task => task.ID == item.ID));
        }

    }
}